name: Healthcare Microservices CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  JAVA_VERSION: "21"
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ghcr.io/${{ github.repository_owner }}/healthcare-microservices

jobs:
  # Test all services in parallel
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            auth-service,
            patient-service,
            billing-service,
            analytics-service,
            api-gateway,
          ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Test ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean test jacoco:report -B

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: ${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Build and push Docker images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    # Run on all pushes
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          [
            auth-service,
            patient-service,
            billing-service,
            analytics-service,
            api-gateway,
          ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    # Run on all pushes

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: healthcare_test
          POSTGRES_USER: healthcare_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      kafka:
        image: bitnami/kafka:latest
        env:
          KAFKA_CFG_NODE_ID: 0
          KAFKA_CFG_PROCESS_ROLES: controller,broker
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          ALLOW_PLAINTEXT_LISTENER: yes
        options: >-
          --health-cmd "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9092:9092

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-integration-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install netcat for service checks
        run: sudo apt-get update && sudo apt-get install -y netcat-openbsd

      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Waiting for PostgreSQL..."
          timeout 60 sh -c 'until pg_isready -h localhost -p 5432 -U healthcare_user; do sleep 2; done'
          echo "‚úÖ PostgreSQL is ready!"

          echo "‚è≥ Waiting for Kafka..."
          timeout 60 sh -c 'until nc -z localhost 9092; do sleep 2; done'
          echo "‚úÖ Kafka is ready!"

          # Additional Kafka readiness check
          timeout 60 sh -c 'until kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1; do sleep 2; done'
          echo "‚úÖ Kafka is fully operational!"

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: healthcare_test
          DB_USER: healthcare_user
          DB_PASSWORD: test123
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          cd integration-tests
          mvn test -B

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-extended,security-and-quality

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build for CodeQL analysis
        run: |
          for service in auth-service patient-service billing-service analytics-service api-gateway; do
            echo "Building $service for analysis..."
            cd $service
            mvn compile -B || { echo "‚ùå Failed to compile $service"; exit 1; }
            cd ..
          done

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ============================================================================
  # CONTINUOUS DEPLOYMENT (CD) PHASE
  # ============================================================================

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push, integration]
    # Run on all pushes for testing
    environment:
      name: development
      url: http://dev.healthcare-microservices.local

    steps:
      - uses: actions/checkout@v4

      - name: Set up LocalStack
        uses: LocalStack/setup-localstack@v0.2.3
        with:
          image-tag: "latest"
          install-awslocal: "true"

      - name: Deploy to Development
        run: |
          echo "üöÄ Deploying to Development environment..."
          cd infrastructure

          # Wait for LocalStack to be ready
          localstack wait -t 30

          # Deploy with development configuration
          export ENVIRONMENT=development
          ./localstack-deploy.sh || { echo "‚ùå Development deployment failed"; exit 1; }

          echo "‚úÖ Development deployment successful!"

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, integration, security]
    # Run on all pushes for testing
    environment:
      name: staging
      url: http://staging.healthcare-microservices.local

    steps:
      - uses: actions/checkout@v4

      - name: Set up LocalStack
        uses: LocalStack/setup-localstack@v0.2.3
        with:
          image-tag: "latest"
          install-awslocal: "true"

      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to Staging environment..."
          cd infrastructure

          # Wait for LocalStack to be ready
          localstack wait -t 30

          # Deploy with staging configuration
          export ENVIRONMENT=staging
          ./localstack-deploy.sh || { echo "‚ùå Staging deployment failed"; exit 1; }

          echo "‚úÖ Staging deployment successful!"

      - name: Run staging smoke tests
        run: |
          echo "üß™ Running staging smoke tests..."

          # Test authentication
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:4566/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"testuser@test.com","password":"password123"}' \
            -o /dev/null)

          if [ "$response" = "200" ]; then
            echo "‚úÖ Staging smoke tests passed!"
          else
            echo "‚ùå Staging smoke tests failed (HTTP $response)"
            exit 1
          fi

  # Deploy to Production Environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    # Run on all pushes for testing
    environment:
      name: production
      url: https://healthcare-microservices.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production (AWS)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
        run: |
          echo "üöÄ Deploying to Production environment..."

          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

          # Deploy using AWS CDK
          cd infrastructure

          # Install CDK if not present
          npm install -g aws-cdk

          # Deploy to production
          export ENVIRONMENT=production
          cdk deploy --require-approval never || { echo "‚ùå Production deployment failed"; exit 1; }

          echo "‚úÖ Production deployment successful!"

      - name: Create production release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v1.0.${context.runNumber}`,
              name: `Production Release v1.0.${context.runNumber}`,
              body: `üöÄ **Production Deployment Successful**\n\n` +
                    `**Commit:** ${context.sha}\n` +
                    `**Services Deployed:**\n` +
                    `- Auth Service\n` +
                    `- Patient Service\n` +
                    `- Billing Service\n` +
                    `- Analytics Service\n` +
                    `- API Gateway\n\n` +
                    `**Environment:** Production`,
              draft: false,
              prerelease: false
            });
